#!/usr/bin/python -tt
#
# Copyright 2009-2014 Eucalyptus Systems, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
# CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
# additional information or have any questions.

import os
import sys
import getopt
import worker
import worker.config as config


def daemonize(func=None):
    # Fork process
    procid = os.fork()
    if procid < 0:
        sys.exit(1)
    elif procid > 0:
        sys.exit(0)
    procid = os.setsid()
    if procid == -1:
        sys.exit(1)

    # Close open file descriptors
    for fd in (0, 1, 2):
        try:
            os.close(fd)
        except OSError:
            pass

    # Point descriptors to /dev/null
    os.open("/dev/null", os.O_RDWR)
    os.dup(0)
    os.dup(0)

    os.umask(027)
    os.chdir("/")

    # Import here since these are only necessary if we daemonize
    import fcntl
    import signal
    import atexit

    # Create pidfile
    try:
        f = open(config.pidfile, "w")
        fcntl.lockf(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
        f.write(str(os.getpid()))
        f.flush()
    except IOError:
        worker.log.error("Failed to write pidfile %s", config.pidfile)
        sys.exit(1)

    signal.signal(signal.SIGTERM, cleanpid)
    atexit.register(cleanpid)

    if func:
        worker.log.info("Starting daemonized worker process")
        func()


def cleanpid(signum=None, action=None):
    os.remove(config.pidfile)
    sys.exit(0)


def usage():
    print """
    %s [-d | --daemonize] [-p | --pidfile] [-l | --log-level]  [-b | --boto-log-level] [-c | --boto-config]
    """ % (os.path.basename(sys.argv[0]))
    sys.exit(1)


if __name__ == "__main__":
    daemon = False
    try:
        longopts = [
            "--help",
            "--daemonize",
            "--pidfile",
            "--log-level",
            "--boto-config",
        ]
        opts, _ = getopt.getopt(sys.argv[1:], "hdp:l:b:c:s:f", longopts)
        for arg, value in opts:
            if arg == "-d" or arg == "--daemonize":
                daemon = True
            elif arg == "-p" or arg == "--pidfile":
                worker.set_pidfile(value)
            elif arg == "-l" or arg == "--log-level":
                worker.set_loglevel(value)
            elif arg == "-b" or arg == "--boto-log-level":
                worker.set_boto_loglevel(value)
            elif arg == "-c" or arg == "--boto-config":
                worker.set_boto_config(value)
            elif arg == "-f":
                worker.set_log_file_count(value)
            elif arg == "-s":
                worker.set_log_file_size(value)
            elif arg == "-h" or arg == "--help":
                usage()
    except getopt.GetoptError:
        usage()

    if daemon:
        daemonize(worker.start_worker)
    else:
        try:
            worker.log.info("Starting Imaging Service")
            worker.start_worker()
        except KeyboardInterrupt:
            worker.log.info("Interrupted By User")
            sys.exit(0)
